// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ps.proto

#include "ps.pb.h"
#include "ps.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ps {

static const char* Service_method_names[] = {
  "/ps.Service/batch_pull",
  "/ps.Service/pull",
};

std::unique_ptr< Service::Stub> Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Service::Stub> stub(new Service::Stub(channel, options));
  return stub;
}

Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_batch_pull_(Service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pull_(Service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Service::Stub::batch_pull(::grpc::ClientContext* context, const ::ps::BatchRequest& request, ::ps::BatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ps::BatchRequest, ::ps::BatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_batch_pull_, context, request, response);
}

void Service::Stub::experimental_async::batch_pull(::grpc::ClientContext* context, const ::ps::BatchRequest* request, ::ps::BatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ps::BatchRequest, ::ps::BatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batch_pull_, context, request, response, std::move(f));
}

void Service::Stub::experimental_async::batch_pull(::grpc::ClientContext* context, const ::ps::BatchRequest* request, ::ps::BatchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_batch_pull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ps::BatchResponse>* Service::Stub::PrepareAsyncbatch_pullRaw(::grpc::ClientContext* context, const ::ps::BatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ps::BatchResponse, ::ps::BatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_batch_pull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ps::BatchResponse>* Service::Stub::Asyncbatch_pullRaw(::grpc::ClientContext* context, const ::ps::BatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbatch_pullRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::pull(::grpc::ClientContext* context, const ::ps::SingleRequest& request, ::ps::SingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ps::SingleRequest, ::ps::SingleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pull_, context, request, response);
}

void Service::Stub::experimental_async::pull(::grpc::ClientContext* context, const ::ps::SingleRequest* request, ::ps::SingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ps::SingleRequest, ::ps::SingleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, std::move(f));
}

void Service::Stub::experimental_async::pull(::grpc::ClientContext* context, const ::ps::SingleRequest* request, ::ps::SingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ps::SingleResponse>* Service::Stub::PrepareAsyncpullRaw(::grpc::ClientContext* context, const ::ps::SingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ps::SingleResponse, ::ps::SingleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ps::SingleResponse>* Service::Stub::AsyncpullRaw(::grpc::ClientContext* context, const ::ps::SingleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpullRaw(context, request, cq);
  result->StartCall();
  return result;
}

Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::ps::BatchRequest, ::ps::BatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ps::BatchRequest* req,
             ::ps::BatchResponse* resp) {
               return service->batch_pull(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::ps::SingleRequest, ::ps::SingleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ps::SingleRequest* req,
             ::ps::SingleResponse* resp) {
               return service->pull(ctx, req, resp);
             }, this)));
}

Service::Service::~Service() {
}

::grpc::Status Service::Service::batch_pull(::grpc::ServerContext* context, const ::ps::BatchRequest* request, ::ps::BatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::pull(::grpc::ServerContext* context, const ::ps::SingleRequest* request, ::ps::SingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ps

